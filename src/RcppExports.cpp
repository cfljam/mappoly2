// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mappoly_chisq_test
List mappoly_chisq_test(List input_data);
RcppExport SEXP _mappoly2_mappoly_chisq_test(SEXP input_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input_data(input_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(mappoly_chisq_test(input_data));
    return rcpp_result_gen;
END_RCPP
}
// filter_non_conforming_classes
List filter_non_conforming_classes(List input_data);
RcppExport SEXP _mappoly2_filter_non_conforming_classes(SEXP input_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input_data(input_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_non_conforming_classes(input_data));
    return rcpp_result_gen;
END_RCPP
}
// segreg_poly
NumericVector segreg_poly(int ploidy_p1, int ploidy_p2, int d_p1, int d_p2);
RcppExport SEXP _mappoly2_segreg_poly(SEXP ploidy_p1SEXP, SEXP ploidy_p2SEXP, SEXP d_p1SEXP, SEXP d_p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ploidy_p1(ploidy_p1SEXP);
    Rcpp::traits::input_parameter< int >::type ploidy_p2(ploidy_p2SEXP);
    Rcpp::traits::input_parameter< int >::type d_p1(d_p1SEXP);
    Rcpp::traits::input_parameter< int >::type d_p2(d_p2SEXP);
    rcpp_result_gen = Rcpp::wrap(segreg_poly(ploidy_p1, ploidy_p2, d_p1, d_p2));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP pairwise_rf_estimation(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_mappoly2_mappoly_chisq_test", (DL_FUNC) &_mappoly2_mappoly_chisq_test, 1},
    {"_mappoly2_filter_non_conforming_classes", (DL_FUNC) &_mappoly2_filter_non_conforming_classes, 1},
    {"_mappoly2_segreg_poly", (DL_FUNC) &_mappoly2_segreg_poly, 4},
    {"pairwise_rf_estimation", (DL_FUNC) &pairwise_rf_estimation, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_mappoly2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
